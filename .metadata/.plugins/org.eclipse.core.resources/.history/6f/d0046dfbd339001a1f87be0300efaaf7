package com.bridgelabz.fundoonotes.service;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoonotes.dto.ForgotPasswordDto;
import com.bridgelabz.fundoonotes.dto.LoginDto;
import com.bridgelabz.fundoonotes.dto.RegistrationDto;
import com.bridgelabz.fundoonotes.dto.ResetPasswordDto;
import com.bridgelabz.fundoonotes.model.User;
import com.bridgelabz.fundoonotes.repository.UserRepository;
import com.bridgelabz.fundoonotes.response.Response;
import com.bridgelabz.fundoonotes.utility.Jms;
import com.bridgelabz.fundoonotes.utility.Jwt;

@Service
public class UserImpl implements UserService 
{
	@Autowired
	private UserRepository repository;

	@Autowired
	private Jwt jwt;

	@Autowired
	private Jms jms;

	@Autowired
	private BCryptPasswordEncoder bcryptpasswordencoder;

	
	/**
	 *@Purpose : To register the user
	 *@return : Given the response is successfully registered or not
	 */
	@Override
	public Response addUser(RegistrationDto registrationDto) 
	{
		ModelMapper mapper = new ModelMapper();
		User user = mapper.map(registrationDto, User.class);
		String token = jwt.createToken("priya96nagare@gmail.com");
		jms.sendMail("priya96nagare@gmail.com", token);
		String regdPass = registrationDto.getPassword();
		String confirmRegdPass = registrationDto.getConfirmPassword();
		if (regdPass.equals(confirmRegdPass)) 
		{
			user.setPassword(regdPass);
			repository.save(user);
			return new Response(200, "user added", HttpStatus.OK);
		}
		return new Response(400, "incorrect password", HttpStatus.BAD_REQUEST);
	}

	
	/**
	 *@Purpose: To login the user
	 *@return : Given the response is successfully logged in or not
	 */
	@Override
	public Response login(LoginDto loginDto, String token)
	{
		String email = jwt.getUserToken(token);
		ModelMapper mapper = new ModelMapper();
		User user = mapper.map(loginDto, User.class);
		if (email.equals(loginDto.getEmailId()))
		{
			boolean isValid = user.getPassword().equals(loginDto.getPassword());
			if (isValid)
			{
				loginDto.getPassword();
				repository.save(user);
				return new Response(200, "login successfull", HttpStatus.OK);
			}
		}
		return new Response(400, "invalid details", HttpStatus.BAD_REQUEST);
	}


	/**
	 *@Purpose: To reset the forgotten password
	 */
	@Override
	public Response forgotPassword(ForgotPasswordDto forgotPasswordDto) 
	{
		ModelMapper mapper=new ModelMapper();
		User user=mapper.map(forgotPasswordDto, User.class);
		User email=repository.findByEmailId(forgotPasswordDto.getEmailId());
		if(email!=null)
		{
			String token=jwt.createToken(forgotPasswordDto.getEmailId());
			jms.sendMail(forgotPasswordDto.getEmailId(), token);
			return new Response(200, "reset password", HttpStatus.OK);
		}
		return new Response(400, "invaid details", HttpStatus.BAD_REQUEST);
	}
	
	/**
	 *@Purpose :  To reset the password
	 *@return : Given the response if the password is successfully reset or not
	 */
	@Override
	public Response resetPassword(ResetPasswordDto resetPasswordDto,String token)
	{
		ModelMapper mapper=new ModelMapper();
		User user=mapper.map(resetPasswordDto, User.class);
		User email=repository.findByEmailId(user.getEmailId());
		if(email.equals(repository.findByEmailId(resetPasswordDto.getEmailId())))
		{
			String token1=jwt.createToken(resetPasswordDto.getEmailId());
			jms.sendMail(resetPasswordDto.getEmailId(), token1);
			User oldPassword=repository.findByEmailId(user.getEmailId());
			if(oldPassword.equals(repository.findByEmailId(resetPasswordDto.getPassword())))
			{
				String newPassword=resetPasswordDto.getEmailId();
				String confirmPassword=resetPasswordDto.getConfirmPassword();
				if(newPassword.equals(confirmPassword))
				{
					user.setPassword(newPassword);
					repository.save(user);
					return new Response(200, "password reset", HttpStatus.OK);
				}
			}
		}
		return new Response(400, "invaild details", HttpStatus.BAD_REQUEST);
	}
}
