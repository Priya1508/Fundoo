package com.bridgelabz.fundoonotes.service;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.bridgelabz.fundoonotes.dto.LoginDto;
import com.bridgelabz.fundoonotes.dto.RegistrationDto;
import com.bridgelabz.fundoonotes.model.User;
import com.bridgelabz.fundoonotes.repository.UserRepository;
import com.bridgelabz.fundoonotes.response.Response;
import com.bridgelabz.fundoonotes.utility.Jms;
import com.bridgelabz.fundoonotes.utility.Jwt;

@Service
public class UserImpl implements UserService 
{
	@Autowired
	private UserRepository repository;

	@Autowired
	private Jwt jwt;

	@Autowired
	private Jms jms;

	@Autowired
	private BCryptPasswordEncoder bcryptpasswordencoder;

	// TO ADD USER TO THE REGISTRATION PAGE
	@Override
	public Response addUser(RegistrationDto registrationDto) 
	{
		ModelMapper mapper = new ModelMapper();
		User user = mapper.map(registrationDto, User.class);
		String token = jwt.createToken("priya96nagare@gmail.com");
		jms.sendMail("priya96nagare@gmail.com", token);
		String regdPass = registrationDto.getPassword();
		String confirmRegdPass = registrationDto.getConfirmPassword();
		if (regdPass.equals(confirmRegdPass)) 
		{
			user.setPassword(regdPass);
			repository.save(user);
			return new Response(200, "user added", HttpStatus.OK);
		}
		return new Response(400, "incorrect password", HttpStatus.BAD_REQUEST);
	}

	// TO LOGIN
	@Override
	public Response login(LoginDto loginDto, String token)
	{
		String email = jwt.getUserToken(token);
		if (email!=null)
		{
			ModelMapper mapper = new ModelMapper();
			User user = mapper.map(loginDto, User.class);
			if (user.getEmailId().equals(loginDto.getEmailId())) 
			{
				boolean isValid=user.getPassword().equals(loginDto.getPassword());
				if(isValid)
				{
					loginDto.getPassword();
					repository.save(user);
					return new Response(200, "login successfull", HttpStatus.OK);
				}
			}
//			user.setEmailId(loginDto.getEmailId());
//			user.setPassword(loginDto.getPassword());
//			repository.save(user);		
		}
		return new Response(400, "invalid details", HttpStatus.BAD_REQUEST);
	}
}
